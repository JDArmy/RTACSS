{
  "maintainer": "Maintainer",
  "collaborators": "Collaborators",
  "background": "Background",
  "changelog": "Change Log",
  "license": "License",
  "introduction": "Introduction",
  "backgroundDesc": "Years ago, companies often assessed their own security by simply using \"penetration testing\" to find vulnerabilities in individual application systems. To assess the criticality of vulnerabilities, the National Infrastructure Advisory Council (NIAC) developed a Common Vulnerability Assessment System, CVSS, hosted by the Forum for Incident Response and Security Teams (FIRST). Based on the previous version, FIRST has continued to iterate the v2 and v3 versions. The hazard assessment criteria for a single vulnerability are more and more accurate and perfect, and are also used by major security organizations and vulnerability recording platforms. With the development of network security, the threats to the network are increasing day by day. By simulating the APT attack methods and behaviors of hackers, the red-blue confrontation exercise method to carry out comprehensive security assessment on enterprises has been widely adopted. Some organizational units have also developed some scoring systems in order to evaluate between attackers and defenders. However, this scoring system can only measure the difference between the attacker and the attacker, and between the defender and the defender. In the case of only one attacking team and one defending team, the problem is even more prominent: if the core system is breached, does it mean that the attacking team is strong or the defending team is weak? If the core system is not broken, is the attacking team weak or the defending team strong? This is very difficult to measure, and there is no mature system for evaluation in the industry. Therefore, JD.Army has developed a red-blue confrontation scoring framework for the actual combat exercise scenario based on years of cyber offensive and defensive exercises and red-blue confrontation experience, referring to CVSS and OWASP risk rating methods.",
  "categoryIntro": "`RTASS consists of two categories, \"${RTASS.factorCategories.CF.name}\" and \"${RTASS.factorCategories.BF.name}\".`",
  "categoryDesc": "`It consists of process factors and scores such as ${RTASS.factorCategories.CF.processScores.map(ps=>RTASS.processScores[ps].name).join(', ')}.`",
  "methods": "Methods",
  "methodsDesc": "`Why must it be \"critical path\" and \"highest\", \"lowest\", \"largest\" and \"most critical\"? \n\nThis is because in a single red-blue confrontation, the attacker can adopt different strategies to form different attack paths, and use dozens or hundreds of different TTPs in the attack path. If these TTPs are measured in turn, it is obviously unrealistic and greatly increases the workload of the evaluation. \n\nSecurity follows the \"short board principle\" as well as the \"long board principle\" - the attacker does not need to ensure that every TTPs investment is the highest technical ability, as long as there are one or several attacks on the critical path High-level attacks may take down corporate targets. So we take the highest level of attack attackers invest in the critical path as a measure of their offensive prowess. \n\nObviously, we can also see that the strength of the attacker does not represent the total effective technical investment of the attacker in a single red-blue confrontation exercise. Let's take physics as an analogy: the maximum force a person exerts on an object does not represent the effective work the person does on the object. Therefore, in order to measure the \"work\" of the attacker, we introduce the concept of \"offensive energy\" to represent the total effective investment of the attacker in a single red-blue confrontation exercise, that is, the technical level of the attacker in this exercise. \n\nRTASS uses the evaluation factor to form ${Object.keys(RTASS.processScores).length} process scores, and the process scores are combined in different ways to form four different roles for the attacker, defender, business, and enterprise. Item final score: ${Object.values(RTASS.finalScores).map(fs=>fs.name).join(', ')}. These ${Object.keys(RTASS.finalScores).length} items refer to the situation in a single exercise, so in different exercises, the score may be different. The scoring methods and factors will be described in detail below.`",
  "finalScoresDesc": "fs.name+'['+fsKey+'] is calculated from '+Object.keys(fs.vectors).length+' process scores such as '+Object.keys(fs.vectors).map(f=>RTASS.processScores[f].name+'['+f+']').join(', ')+', '+fs.description",
  "finalScoresPS": "The above associations may change with the evolution of RTASS.",
  "scoringDesc": "In this scoring framework, each scoring factor has a total of 5 scoring items from 0 to 4. The process score and final score: the lowest score is 0 points, and the highest score is 10 points. Among them, the distribution of the corresponding grades for each score is as follows:",
  "scoringDescHeader": "| Score  | Level |",
  "scoringDescPS": "Note: Some scoring factors in this framework, such as \"vulnerability risk\" and \"enterprise impact\", refer to the relevant factors in the OWASP risk rating method.",
  "scoreFactor": "Score Factor",
  "scoreAbility": "Score Ability",
  "scoreAbilityDesc": "In order to be able to measure the scoring factor in more detail, RTASS developed the Plus version on the basis of the Base version, adding a more refined \"ability factor\" to the scoring factor. With the capability factor, RTASS can not only make a macro evaluation of the attackers, defenders, business parties and enterprises, but also indicate the strengths and weaknesses of their capability points and the direction that needs to be further improved in a more detailed manner. As of now, the following scoring factors have capability options:",
  "processScoreDesc": "fc.name +' consists of '+fc.processScores.length+' parts, such as '+fc.processScores.map(ps=>RTASS.processScores[ps].name).join(', ')+'.'",
  "processScoringDesc": "RTASS.processScores[ps].name+' is calculated from '+Object.keys(psVectors).length+' factor scores such as '+Object.keys(psVectors).map(f=>RTASS.factors[f].name+'['+f+']').join(', ')+'. The calculation algorithm is: '",
  "factorDesc": "f.name+' mainly used for evaluate when '+f.description",
  "factorScoreDesc": "f.name + ' consists of '+ Object.keys(f.vectors).length + ' parts, such as ' +Object.keys(f.vectors).map(aKey=>RTASS.abilities[aKey].name+'['+aKey+']').join(', ')+'. The calculation algorithm is: '",
  "abilityDesc": "a.name+' mainly used for evaluate when '+a.description",
  "vectorString": "Vector String",
  "vectorStringDesc": "With reference to the CVSS scoring framework, RTASS also uses \"vector strings\" to record the scoring process and to transmit RTASS indicator information. The RTASS vector string starts with the label \"RTASS:\" and the digital representation of the current version (for example 1.0.0). The indicator information appears in the form of a set of indicators, each indicator is preceded by a forward slash \"\/\" as a separator. Each indicator is composed of an abbreviated indicator name, colon, and indicator value. The abbreviations are defined earlier in this specification (in parentheses after each factor name) and are summarized in the table below.",
  "factor": "Factor",
  "ability": "Ability",
  "vectorStringDescFactorHeader": "| Factor Name  | Possible Value |",
  "vectorStringDescAbilityHeader": "| Ability Name | Possible Value |",
  "vectorStringDescPS": "Note: In the RTASS Base scoring mode, the ability factor is not required; in the RTASS Plus scoring mode, the ability factor is required.",
  "vectorStringExample": " Mode ector string Example:",
  "vectorStringExamplePS": "The vector string should contain all the indicators shown in the table above, accepting any order of measurement. If the vector string contains the same metric multiple times, the last metric shall prevail.",
  "oneThingAbout": "One Thing About RTASS",
  "ontThingAboutDesc": "In the RTASS framework, the process score is calculated through the basic factors, and then the final score is calculated through the process score. The algorithm reserves space for future expansion, but in the case of insufficient data at this stage, the modulus of the factor is basically 1.\n\nIn solving this problem, CVSS adopted the method of manually constructing a set of lookup tables corresponding to the severity of real vulnerabilities through the CVSS Special Interest Group (SIG), and then adjusting the parameters in turn. Finally, it is ensured that the deviation between the manual evaluation vulnerability score and the CVSS framework evaluation score is less than 0.5.\n\nDue to the difference between red and blue confrontation exercises and vulnerability, it is currently impossible to adjust parameters through a large number of ready-made samples. However, we will continue to collect new samples, through manual evaluation and reference to updated methodology, to make the RTASS score more accurate. This also requires more participation and strong support from you who read this specification.",
  "collaborateAndContribute": "Collaborate And Contribute",
  "collaborateAndContributeDesc": "This framework uses JSON format for system description, see \"/src/RTASS.json\" file for details, where:\n\n- The ability score is placed in the \"abilities\" object, including Chinese and English from 0 to 4 for each factor Score description. \n- Scoring factors are placed in the \"factors\" object, including a description of each factor's scores in Chinese and English from 0 to 4. \n- Process scores are described by \"processScores\", where \"algorithm\" is the scoring algorithm. \n- Final scores are described by \"finalScores\", where \"algorithm\" is the scoring algorithm. \n- The \"levels\" object stores the correspondence between the scores and the extremes, highs, mediums, and lows. \n- The \"factorGroups\" object stores the corresponding relationship between the two groups of offensive and defensive factors and business factors and the process score. \n\nCollaborators can cooperate with us to develop the system framework by modifying the description of each scoring factor and scoring algorithm in the RTASS.json file.",
  "thanks": "Thanks",
  "reference": "References",
  "onlineCalculator": "Online Calculator"
}